/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#include "../keys_colemak.h"
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_58keys.h"

#define COLEMAK        0
#define NAV            1
#define NUM            2
#define SYM            3
#define WORKSPACE_NAV  4

#define KEYS_L LT5 LT4 LT3 LT2 LT1 LT0 LM5 LM4 LM3 LM2 LM1 LM0 LB5 LB4 LB3 LB2 LB1 LB0 LF5 LF4 LF3 LF2 LF1 LF0
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 RF0 RF1 RF2 RF3 RF4 RF5
#define THUMBS LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3

#define HYPER_0 LG(LC(LA(N0)))
#define HYPER_1 LG(LC(LA(N1)))
#define HYPER_2 LG(LC(LA(N2)))
#define HYPER_3 LG(LC(LA(N3)))
#define HYPER_4 LG(LC(LA(N4)))
#define HYPER_5 LG(LC(LA(N5)))
#define HYPER_6 LG(LC(LA(N6)))
#define HYPER_7 LG(LC(LA(N7)))
#define HYPER_8 LG(LC(LA(N8)))
#define HYPER_9 LG(LC(LA(N9)))

#define QUICK_TAP_MS 175

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

&caps_word {
     /delete-property/ ignore-modifiers;
    // continue-list = <UNDERSCORE  BACKSPACE DELETE LSHFT RSHFT>;
    continue-list = <BSPC DEL UNDERSCORE MINUS LSHFT RSHFT>; 
};

&num_word {  // num-word, requires PR #1451
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};

#define IDLE_MS 95

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <IDLE_MS>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <IDLE_MS>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

// tap: repeat | hold: activate layer
ZMK_BEHAVIOR(mo_rep, hold_tap,
    bindings = <&mo>, <&key_repeat>;
    tapping-term-ms = <170>;
)

// tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
ZMK_BEHAVIOR(bs_del, mod_morph,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <MOD_RSFT>;
)

// tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
ZMK_BEHAVIOR(lt_spc, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&spc_morph>;
)
SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_BEHAVIOR(dot_spc, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

/ {
    behaviors {
        // alt_repeat: alt_repeat {
        //     compatible = "zmk,behavior-antecedent-morph";
        //     label = "ALT_REPEAT";
        //     #binding-cells = <0>;
        //     defaults = <&kp A>;
        //     bindings = <&kp K>, <&kp J>, <&kp L>, <&kp H>, <&kp LS(K)>, <&kp LS(J)>;
        //     antecedents = <J K H L LS(J) LS(K)>;
        //     max-delay-ms = <60000>;
        // };
    };
    macros {
        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "ARROW";
        };

        fat_arrow: fat_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "FAT_ARROW";
        };

        scope: scope {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp COLON>;
            label = "SCOPE";
        };

        fence: fence {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "FENCE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
//    ┌────────────┬──────────────┬──────────────┬─────────────┬───────────────────┬─────────────────┐                                 ┌─────────┬─────────────┬──────────────┬──────────────┬──────────────┬───────────┐
//    │ &kp GRAVE  │    &kp N1    │    &kp N2    │   &kp N3    │      &kp N4       │     &kp N5      │                                 │ &kp N6  │   &kp N7    │    &kp N8    │    &kp N9    │    &kp N0    │ &kp EQUAL │
//    ├────────────┼──────────────┼──────────────┼─────────────┼───────────────────┼─────────────────┤                                 ├─────────┼─────────────┼──────────────┼──────────────┼──────────────┼───────────┤
//    │  &kp TAB   │    &kp Q     │    &kp W     │    &kp F    │       &kp P       │      &kp G      │                                 │  &kp J  │    &kp L    │    &kp U     │    &kp Y     │   &kp SEMI   │ &kp MINUS │
//    ├────────────┼──────────────┼──────────────┼─────────────┼───────────────────┼─────────────────┤                                 ├─────────┼─────────────┼──────────────┼──────────────┼──────────────┼───────────┤
//    │  &kp ESC   │ &hml LSHFT A │ &hml LCTRL R │ &hml LALT S │    &hml LGUI T    │      &kp D      │                                 │  &kp H  │ &hmr RGUI N │ &hmr LALT E  │ &hmr RCTRL I │ &hmr RSHFT O │  &kp SQT  │
//    ├────────────┼──────────────┼──────────────┼─────────────┼───────────────────┼─────────────────┼───────────────┐   ┌─────────────┼─────────┼─────────────┼──────────────┼──────────────┼──────────────┼───────────┤
//    │ &caps_word │  &lt NUM Z   │    &kp X     │    &kp C    │       &kp V       │      &kp B      │   &kp LBKT    │   │  &kp RBKT   │  &kp K  │    &kp M    │  &kp COMMA   │   &kp DOT    │ &lt NUM FSLH │ &num_word │
//    └────────────┴──────────────┴──────────────┼─────────────┼───────────────────┼─────────────────┼───────────────┤   ├─────────────┼─────────┼─────────────┼──────────────┼──────────────┴──────────────┴───────────┘
//                                               │ &key_repeat │ &mo WORKSPACE_NAV │ &mo_rep SYM SYM │ &lt NAV SPACE │   │ &lt NAV RET │ &mo SYM │   &bs_del   │ &kp C_REPEAT │                                          
//                                               └─────────────┴───────────────────┴─────────────────┴───────────────┘   └─────────────┴─────────┴─────────────┴──────────────┘                                          
  &kp GRAVE    &kp N1         &kp N2         &kp N3        &kp N4              &kp N5                                              &kp N6    &kp N7        &kp N8         &kp N9         &kp N0         &kp EQUAL
  &kp TAB      &kp Q          &kp W          &kp F         &kp P               &kp G                                               &kp J     &kp L         &kp U          &kp Y          &kp SEMI       &kp MINUS
  &kp ESC      &hml LSHFT A   &hml LCTRL R   &hml LALT S   &hml LGUI T         &kp D                                               &kp H     &hmr RGUI N   &hmr LALT E    &hmr RCTRL I   &hmr RSHFT O   &kp SQT  
  &caps_word   &lt NUM Z      &kp X          &kp C         &kp V               &kp B             &kp LBKT            &kp RBKT      &kp K     &kp M         &kp COMMA      &kp DOT        &lt NUM FSLH   &num_word
                                             &key_repeat   &mo WORKSPACE_NAV   &mo_rep SYM SYM   &lt NAV SPACE       &lt NAV RET   &mo SYM   &bs_del       &kp C_REPEAT                                          
            >;
        };

        navigation {
            bindings = <
//    ┌────────────┬──────────────────────┬──────────────────────┬──────────────┬──────────────┬──────────────┐                     ┌────────────────┬──────────────────┬───────────────┬────────────┬──────────────┬─────────────────┐
//    │ &bt BT_CLR │ &kp C_BRIGHTNESS_DEC │ &kp C_BRIGHTNESS_INC │ &bt BT_SEL 0 │ &bt BT_SEL 1 │ &bt BT_SEL 2 │                     │ &kp K_PREVIOUS │ &kp K_PLAY_PAUSE │ &kp K_FORWARD │ &kp K_MUTE │ &kp C_VOL_DN │ &kp C_VOLUME_UP │
//    ├────────────┼──────────────────────┼──────────────────────┼──────────────┼──────────────┼──────────────┤                     ├────────────────┼──────────────────┼───────────────┼────────────┼──────────────┼─────────────────┤
//    │   &trans   │        &trans        │        &trans        │    &trans    │    &trans    │    &trans    │                     │    &kp DOWN    │    &kp RIGHT     │    &trans     │   &trans   │    &trans    │     &trans      │
//    ├────────────┼──────────────────────┼──────────────────────┼──────────────┼──────────────┼──────────────┤                     ├────────────────┼──────────────────┼───────────────┼────────────┼──────────────┼─────────────────┤
//    │   &trans   │      &kp LSHFT       │      &kp LCTRL       │   &kp LALT   │   &kp LCMD   │    &trans    │                     │    &kp LEFT    │      &trans      │    &trans     │   &trans   │    &trans    │     &trans      │
//    ├────────────┼──────────────────────┼──────────────────────┼──────────────┼──────────────┼──────────────┼────────┐   ┌────────┼────────────────┼──────────────────┼───────────────┼────────────┼──────────────┼─────────────────┤
//    │   &trans   │        &trans        │        &trans        │    &trans    │    &trans    │    &trans    │ &trans │   │ &trans │     &kp UP     │      &trans      │    &trans     │   &trans   │    &trans    │     &trans      │
//    └────────────┴──────────────────────┴──────────────────────┼──────────────┼──────────────┼──────────────┼────────┤   ├────────┼────────────────┼──────────────────┼───────────────┼────────────┴──────────────┴─────────────────┘
//                                                               │    &trans    │    &trans    │    &trans    │ &trans │   │ &trans │     &trans     │      &trans      │    &trans     │                                              
//                                                               └──────────────┴──────────────┴──────────────┴────────┘   └────────┴────────────────┴──────────────────┴───────────────┘                                              
  &bt BT_CLR   &kp C_BRIGHTNESS_DEC   &kp C_BRIGHTNESS_INC   &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2                         &kp K_PREVIOUS   &kp K_PLAY_PAUSE   &kp K_FORWARD   &kp K_MUTE   &kp C_VOL_DN   &kp C_VOLUME_UP
  &trans       &trans                 &trans                 &trans         &trans         &trans                               &kp DOWN         &kp RIGHT          &trans          &trans       &trans         &trans         
  &trans       &kp LSHFT              &kp LCTRL              &kp LALT       &kp LCMD       &trans                               &kp LEFT         &trans             &trans          &trans       &trans         &trans         
  &trans       &trans                 &trans                 &trans         &trans         &trans         &trans       &trans   &kp UP           &trans             &trans          &trans       &trans         &trans         
                                                             &trans         &trans         &trans         &trans       &trans   &trans           &trans             &trans                                                     
            >;
        };

        number {
            bindings = <
//    ┌────────┬────────┬────────┬────────┬────────┬────────┐                     ┌────────┬────────┬────────┬────────┬─────────┬────────┐
//    │ &trans │ &kp F1 │ &kp F2 │ &kp F3 │ &kp F4 │ &kp F5 │                     │ &kp F6 │ &kp F7 │ &kp F8 │ &kp F9 │ &kp F10 │ &trans │
//    ├────────┼────────┼────────┼────────┼────────┼────────┤                     ├────────┼────────┼────────┼────────┼─────────┼────────┤
//    │ &trans │ &trans │ &trans │ &trans │ &trans │ &trans │                     │ &trans │ &trans │ &trans │ &trans │ &trans  │ &trans │
//    ├────────┼────────┼────────┼────────┼────────┼────────┤                     ├────────┼────────┼────────┼────────┼─────────┼────────┤
//    │ &trans │ &kp N1 │ &kp N2 │ &kp N3 │ &kp N4 │ &kp N5 │                     │ &kp N6 │ &kp N7 │ &kp N8 │ &kp N9 │ &kp N0  │ &trans │
//    ├────────┼────────┼────────┼────────┼────────┼────────┼────────┐   ┌────────┼────────┼────────┼────────┼────────┼─────────┼────────┤
//    │ &trans │ &trans │ &trans │ &trans │ &trans │ &trans │ &trans │   │ &trans │ &trans │ &trans │ &trans │ &trans │ &trans  │ &trans │
//    └────────┴────────┴────────┼────────┼────────┼────────┼────────┤   ├────────┼────────┼────────┼────────┼────────┴─────────┴────────┘
//                               │ &trans │ &trans │ &trans │ &trans │   │ &trans │ &trans │ &trans │ &trans │                            
//                               └────────┴────────┴────────┴────────┘   └────────┴────────┴────────┴────────┘                            
  &trans   &kp F1   &kp F2   &kp F3   &kp F4   &kp F5                         &kp F6   &kp F7   &kp F8   &kp F9   &kp F10   &trans
  &trans   &trans   &trans   &trans   &trans   &trans                         &trans   &trans   &trans   &trans   &trans    &trans
  &trans   &kp N1   &kp N2   &kp N3   &kp N4   &kp N5                         &kp N6   &kp N7   &kp N8   &kp N9   &kp N0    &trans
  &trans   &trans   &trans   &trans   &trans   &trans   &trans       &trans   &trans   &trans   &trans   &trans   &trans    &trans
                             &trans   &trans   &trans   &trans       &trans   &trans   &trans   &trans                            
            >;
        };

        symbol {
            bindings = <
//    ┌────────────┬──────────────────┬───────────────┬──────────────────┬───────────────────┬─────────────────┐                     ┌───────────┬─────────────┬──────────────────────┬───────────────────────┬──────────────┬────────┐
//    │   &trans   │      &trans      │    &trans     │      &trans      │      &trans       │     &trans      │                     │  &trans   │   &trans    │        &trans        │        &trans         │    &trans    │ &trans │
//    ├────────────┼──────────────────┼───────────────┼──────────────────┼───────────────────┼─────────────────┤                     ├───────────┼─────────────┼──────────────────────┼───────────────────────┼──────────────┼────────┤
//    │   &arrow   │ &kp SINGLE_QUOTE │ &kp LESS_THAN │ &kp GREATER_THAN │ &kp DOUBLE_QUOTES │    &kp CARET    │                     │ &kp HASH  │ &kp DOLLAR  │    &kp LEFT_BRACE    │    &kp RIGHT_BRACE    │ &kp PERCENT  │ &scope │
//    ├────────────┼──────────────────┼───────────────┼──────────────────┼───────────────────┼─────────────────┤                     ├───────────┼─────────────┼──────────────────────┼───────────────────────┼──────────────┼────────┤
//    │ &fat_arrow │  &kp UNDERSCORE  │   &kp MINUS   │     &kp PLUS     │     &kp EQUAL     │  &kp AMPERSAND  │                     │ &kp PIPE  │  &kp COLON  │   &kp LEFT_BRACKET   │   &kp RIGHT_BRACKET   │  &kp GRAVE   │ &fence │
//    ├────────────┼──────────────────┼───────────────┼──────────────────┼───────────────────┼─────────────────┼────────┐   ┌────────┼───────────┼─────────────┼──────────────────────┼───────────────────────┼──────────────┼────────┤
//    │   &trans   │    &kp COMMA     │   &kp SLASH   │   &kp ASTERISK   │   &kp BACKSLASH   │ &kp EXCLAMATION │ &trans │   │ &trans │ &kp TILDE │ &kp AT_SIGN │ &kp LEFT_PARENTHESIS │ &kp RIGHT_PARENTHESIS │ &kp QUESTION │ &trans │
//    └────────────┴──────────────────┴───────────────┼──────────────────┼───────────────────┼─────────────────┼────────┤   ├────────┼───────────┼─────────────┼──────────────────────┼───────────────────────┴──────────────┴────────┘
//                                                    │      &trans      │      &trans       │     &trans      │ &trans │   │ &trans │  &trans   │   &trans    │        &trans        │                                                
//                                                    └──────────────────┴───────────────────┴─────────────────┴────────┘   └────────┴───────────┴─────────────┴──────────────────────┘                                                
  &trans       &trans             &trans          &trans             &trans              &trans                                  &trans      &trans        &trans                 &trans                  &trans         &trans
  &arrow       &kp SINGLE_QUOTE   &kp LESS_THAN   &kp GREATER_THAN   &kp DOUBLE_QUOTES   &kp CARET                               &kp HASH    &kp DOLLAR    &kp LEFT_BRACE         &kp RIGHT_BRACE         &kp PERCENT    &scope
  &fat_arrow   &kp UNDERSCORE     &kp MINUS       &kp PLUS           &kp EQUAL           &kp AMPERSAND                           &kp PIPE    &kp COLON     &kp LEFT_BRACKET       &kp RIGHT_BRACKET       &kp GRAVE      &fence
  &trans       &kp COMMA          &kp SLASH       &kp ASTERISK       &kp BACKSLASH       &kp EXCLAMATION   &trans       &trans   &kp TILDE   &kp AT_SIGN   &kp LEFT_PARENTHESIS   &kp RIGHT_PARENTHESIS   &kp QUESTION   &trans
                                                  &trans             &trans              &trans            &trans       &trans   &trans      &trans        &trans                                                              
            >;
        };

        workspace_nav {
            bindings = <
//    ┌────────┬─────────────────┬─────────────────┬─────────────────┬─────────────────┬─────────────────┐                     ┌─────────────────┬─────────────────┬─────────────────┬─────────────────┬─────────────────┬────────┐
//    │ &trans │     &trans      │     &trans      │     &trans      │     &trans      │     &trans      │                     │     &trans      │     &trans      │     &trans      │     &trans      │     &trans      │ &trans │
//    ├────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┤                     ├─────────────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┼────────┤
//    │ &trans │ &kp LS(HYPER_1) │ &kp LS(HYPER_2) │ &kp LS(HYPER_3) │ &kp LS(HYPER_4) │ &kp LS(HYPER_5) │                     │ &kp LS(HYPER_6) │ &kp LS(HYPER_7) │ &kp LS(HYPER_8) │ &kp LS(HYPER_9) │ &kp LS(HYPER_0) │ &trans │
//    ├────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┤                     ├─────────────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┼────────┤
//    │ &trans │   &kp HYPER_1   │   &kp HYPER_2   │   &kp HYPER_3   │   &kp HYPER_4   │   &kp HYPER_5   │                     │   &kp HYPER_6   │   &kp HYPER_7   │   &kp HYPER_8   │   &kp HYPER_9   │   &kp HYPER_0   │ &trans │
//    ├────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┼────────┐   ┌────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┼────────┤
//    │ &trans │     &trans      │     &trans      │     &trans      │     &trans      │     &trans      │ &trans │   │ &trans │     &trans      │     &trans      │     &trans      │     &trans      │     &trans      │ &trans │
//    └────────┴─────────────────┴─────────────────┼─────────────────┼─────────────────┼─────────────────┼────────┤   ├────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┴─────────────────┴────────┘
//                                                 │     &trans      │     &trans      │     &trans      │ &trans │   │ &trans │     &trans      │     &trans      │     &trans      │                                             
//                                                 └─────────────────┴─────────────────┴─────────────────┴────────┘   └────────┴─────────────────┴─────────────────┴─────────────────┘                                             
  &trans   &trans            &trans            &trans            &trans            &trans                                  &trans            &trans            &trans            &trans            &trans            &trans
  &trans   &kp LS(HYPER_1)   &kp LS(HYPER_2)   &kp LS(HYPER_3)   &kp LS(HYPER_4)   &kp LS(HYPER_5)                         &kp LS(HYPER_6)   &kp LS(HYPER_7)   &kp LS(HYPER_8)   &kp LS(HYPER_9)   &kp LS(HYPER_0)   &trans
  &trans   &kp HYPER_1       &kp HYPER_2       &kp HYPER_3       &kp HYPER_4       &kp HYPER_5                             &kp HYPER_6       &kp HYPER_7       &kp HYPER_8       &kp HYPER_9       &kp HYPER_0       &trans
  &trans   &trans            &trans            &trans            &trans            &trans            &trans       &trans   &trans            &trans            &trans            &trans            &trans            &trans
                                               &trans            &trans            &trans            &trans       &trans   &trans            &trans            &trans                                                      
            >;
        };
    };
};

/* vim: set ft=dts */
